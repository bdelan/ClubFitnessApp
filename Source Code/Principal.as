package {	import flash.display.*;	import flash.events.*;	import flash.net.*;	import flash.geom.Rectangle;	import fl.transitions.*;	import fl.transitions.easing.*;	import flash.desktop.NativeApplication;	import flash.ui.Keyboard;	import flash.system.Capabilities;	//Clase principal.	public class Principal extends MovieClip	{		static var escenario:MovieClip;		var dragDieta:int = new int(0);		var dragTabla:int = new int(0);		var distancia:int = new int(0);		//Variables de la pantalla principal.		static var cabecera:Cabecera;		var texto:Texto;		static var botonClientes:BotonClientes;		static var botonMonitores:BotonMonitores;		static var version:Version = new Version();				//Variables del boton Inicio.		static var botonInicio:BotonInicio;		var atras:int = new int(0);		//Variables de la pantalla Acceso Clientes.		var accesoClientes:int = new int(0);		static var botonValidarCliente:BotonValidarCliente;		static var validaCliente:ValidarAcceso = new ValidarAcceso();		var cliente:String = new String();		//Variables de la pantalla Acceso Monitores.		var accesoMonitores:int = new int(0);		static var botonValidarMonitor:BotonValidarMonitor;		static var validaMonitor:ValidarAcceso = new ValidarAcceso();		//Variables de la pantalla Info personal / Seguimiento.		static var botonInfoPersonal:BotonInfoPersonal;		static var botonSeguimiento:BotonSeguimiento;		//Variables de la pantalla Info personal.		var imgCliente:ImgCliente = new ImgCliente();		var infoCliente:InfoCliente = new InfoCliente();		//Variables de la pantalla Seguimiento.		static var botonEjercicios:BotonEjercicios;		static var botonDieta:BotonDieta;				//Variables de la pantalla Monitores.		static var botonInfoClientes:BotonInfoClientes;				static var botonGesTabla:BotonGesTabla;		static var botonGesDieta:BotonGesDieta;				var contador:int = new int(0);				//Funcion Principal.		public function Principal()		{			escenario = new MovieClip();			stage.addChild(escenario);						//Añade la opcion de scroll.			stage.addEventListener(MouseEvent.MOUSE_DOWN,scrollDownHandler);			stage.addEventListener(MouseEvent.MOUSE_UP,scrollUpHandler);						//Controla la accion por defecto del boton atras del dispositivo.			if (Capabilities.cpuArchitecture == "ARM") {				NativeApplication.nativeApplication.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown, false, 0, true);			} 						//Se añaden los objetos de la pantalla Principal.			cabecera =  new Cabecera();			stage.addChild(cabecera);			texto = new Texto();			escenario.addChild(texto);			texto.x = 130;			texto.y = 300;			botonClientes = new BotonClientes();			escenario.addChild(botonClientes);			botonClientes.x = 70;			botonClientes.y = 500;			botonMonitores = new BotonMonitores();			escenario.addChild(botonMonitores);			botonMonitores.x = 70;			botonMonitores.y = 630;						escenario.addChild(version);			version.x = 556;			version.y = 1018;						botonClientes.addEventListener(MouseEvent.CLICK, botonClientesHandler);			botonMonitores.addEventListener(MouseEvent.CLICK, botonMonitoresHandler);			botonInicio = new BotonInicio();			botonInicio.addEventListener(MouseEvent.CLICK, botonInicioHandler);			botonValidarCliente = new BotonValidarCliente();			botonValidarCliente.addEventListener(MouseEvent.CLICK, botonValidarClienteHandler);			botonValidarMonitor = new BotonValidarMonitor();			botonValidarMonitor.addEventListener(MouseEvent.CLICK, botonValidarMonitorHandler);			botonInfoPersonal = new BotonInfoPersonal();			botonInfoPersonal.addEventListener(MouseEvent.CLICK, botonInfoPersonalHandler);			botonSeguimiento = new BotonSeguimiento();			botonSeguimiento.addEventListener(MouseEvent.CLICK, botonSeguimientoHandler);			botonEjercicios = new BotonEjercicios();			botonEjercicios.addEventListener(MouseEvent.CLICK, botonEjerciciosHandler);			botonDieta = new BotonDieta();			botonDieta.addEventListener(MouseEvent.CLICK, botonDietaHandler);									botonInfoClientes = new BotonInfoClientes();			botonInfoClientes.addEventListener(MouseEvent.CLICK, botonInfoClientesHandler);						botonGesTabla = new BotonGesTabla();			botonGesTabla.addEventListener(MouseEvent.CLICK, botonGesTablaHandler);			botonGesDieta = new BotonGesDieta();			botonGesDieta.addEventListener(MouseEvent.CLICK, botonGesDietaHandler);		}		//Funcion pantalla Acceso Clientes.		function botonClientesHandler(MouseEvent)		{			dragDieta = 0;			dragTabla = 0;			atras = 1;						//Se eliminan los objetos de la pantalla principal.			limpiaEscenario();						escenario.addChild(cabecera);			escenario.addChild(botonInicio);			botonInicio.x = 529;			botonInicio.y = 30;						if (accesoClientes == 0) {								escenario.addChild(validaCliente);				validaCliente.x = 0;				validaCliente.y = 340;				validaCliente.caja_user.text = "";				validaCliente.caja_pass.text = "";				validaCliente.caja_validaTexto.text = "Por favor, valida tu acceso a continuación:";							escenario.addChild(botonValidarCliente);				botonValidarCliente.x = 175;				botonValidarCliente.y = 580;			}			else {								escenario.addChild(botonInfoPersonal);				botonInfoPersonal.x = 70;				botonInfoPersonal.y = 500;					escenario.addChild(botonSeguimiento);				botonSeguimiento.x = 70;				botonSeguimiento.y = 630;			}		}		//Funcion comprobar autrizacion cliente.		function botonValidarClienteHandler(MouseEvent)		{			dragDieta = 0;			dragTabla = 0;			atras = 1;						if(validaCliente.caja_user.text == "123" && validaCliente.caja_pass.text == "ABC") {				cliente = validaCliente.caja_user.text;								accesoClientes = 1;																//Eliminamos los objetos de la pantalla principal.				limpiaEscenario();								escenario.addChild(cabecera);				escenario.addChild(botonInicio);				botonInicio.x = 529;				botonInicio.y = 30;							//Añadimos los objetos de la pantalla Acceso Clientes.				escenario.addChild(botonInfoPersonal);				botonInfoPersonal.x = 70;				botonInfoPersonal.y = 500;					escenario.addChild(botonSeguimiento);				botonSeguimiento.x = 70;				botonSeguimiento.y = 630;			}			else {				validaCliente.caja_validaTexto.text = "User/pass incorrectos. Intentalo de nuevo";			}		}		//Funcion pantalla Informacion Personal.		function botonInfoPersonalHandler(MouseEvent)		{						dragDieta = 0;			dragTabla = 0;			atras = 2;						//Se eliminan los objetos de la pantalla principal.			limpiaEscenario();						escenario.addChild(cabecera);			escenario.addChild(botonInicio);			botonInicio.x = 529;			botonInicio.y = 30;						//XML			var loaderInfoPersonal:URLLoader = new URLLoader();			loaderInfoPersonal.addEventListener(Event.COMPLETE,loaderInfoPersonalHandler);			var rutaInfoPersonal:URLRequest = new URLRequest("infoPersonal.xml");			loaderInfoPersonal.load(rutaInfoPersonal);		}				//Funcion carga Informacion Personal.		function loaderInfoPersonalHandler(event:Event)		{			var cargadorCliente:URLLoader = event.target as URLLoader;			var xmlCliente:XML = new XML(cargadorCliente.data);						for each(var nodo:XML in xmlCliente.elements()){				if (nodo.ID == cliente) {					escenario.addChild(imgCliente);					imgCliente.x = 430;					imgCliente.y = 235;					var moverImgCliente:Tween = new Tween(imgCliente,"alpha",Regular.easeIn,0,100,300);										//Se cargan los datos del cliente					infoCliente.caja_nombre.text = nodo.nombre;					infoCliente.caja_apellido1.text = nodo.apellido1;					infoCliente.caja_apellido2.text = nodo.apellido2;					infoCliente.caja_telefono.text = nodo.telefono;					infoCliente.caja_direccion.text = nodo.direccion;					infoCliente.caja_sexo.text = nodo.sexo;					infoCliente.caja_edad.text = nodo.edad;					infoCliente.caja_estatura.text = int(nodo.estatura)/100+" m";					infoCliente.caja_peso.text = nodo.peso+" kg";					infoCliente.caja_imc.text = String(int(nodo.peso)/((int(nodo.estatura)/100)*(int(nodo.estatura)/100)));					infoCliente.caja_trabajo.text = nodo.trabajo;					infoCliente.caja_dieta.text = nodo.dieta;					infoCliente.caja_otrasActividades.text = nodo.otrasActividades;					infoCliente.caja_objetivos.text = nodo.objetivos;					infoCliente.caja_enfermedades.text = nodo.enfermedades;				}									escenario.addChild(infoCliente);					infoCliente.x = 30;					infoCliente.y = 235;					var moverInfoCliente:Tween = new Tween(infoCliente,"alpha",Regular.easeIn,0,100,300);			}		}		//Funcion pantalla Seguimiento.		function botonSeguimientoHandler(MouseEvent)		{						dragDieta = 0;			dragTabla = 0;			atras = 2;						//Se eliminan los objetos de la pantalla principal.			limpiaEscenario();						escenario.addChild(cabecera);			escenario.addChild(botonInicio);			botonInicio.x = 529;			botonInicio.y = 30;						escenario.addChild(botonEjercicios);			botonEjercicios.x = 70;			botonEjercicios.y = 500;			escenario.addChild(botonDieta);			botonDieta.x = 70;			botonDieta.y = 630;		}				//Funcion pantalla Ejercicios.		function botonEjerciciosHandler(MouseEvent)		{						dragTabla = 1;			atras = 3;						//Se eliminan los objetos de la pantalla principal.			limpiaEscenario();						escenario.addChild(cabecera);			escenario.addChild(botonInicio);			botonInicio.x = 529;			botonInicio.y = 30;			//XML			var loaderInfoEjercicios:URLLoader = new URLLoader();			loaderInfoEjercicios.addEventListener(Event.COMPLETE,loaderInfoEjerciciosHandler);			var rutaInfoEjercicios:URLRequest = new URLRequest("infoEjercicios.xml");			loaderInfoEjercicios.load(rutaInfoEjercicios);		}				//Funcion carga Informacion Ejercicios.		function loaderInfoEjerciciosHandler(event:Event)		{			var posX:Number = new Number(50);			var posY:Number = new Number(200);						var cargadorEjercicio:URLLoader = event.target as URLLoader;			var xmlEjercicio:XML = new XML(cargadorEjercicio.data);						contador = 0;			for each(var nodo:XML in xmlEjercicio.elements()){				var tablaEjercicios:TablaEjercicios = new TablaEjercicios();								//Se cargan los datos de las tablas de ejercicios.				contador+=1;				tablaEjercicios.imagen.gotoAndStop(nodo.tipo);				tablaEjercicios.imagen2.gotoAndStop(nodo.subtipo);				tablaEjercicios.caja_orden.text = String(contador);				tablaEjercicios.caja_nombre.text = nodo.nombre;				tablaEjercicios.caja_series.text = nodo.series;				tablaEjercicios.caja_repeticiones.text = nodo.repeticiones;				tablaEjercicios.caja_peso.text = nodo.peso;				tablaEjercicios.caja_descanso.text = nodo.descanso;								escenario.addChild(tablaEjercicios);				tablaEjercicios.x = posX;				tablaEjercicios.y = posY;								posY = posY + 450;			}		}				//Funcion pantalla Informacion Dieta.		function botonDietaHandler(MouseEvent)		{			dragDieta = 1;			atras = 3;						//Se eliminan los objetos de la pantalla principal.			limpiaEscenario();						escenario.addChild(cabecera);			escenario.addChild(botonInicio);			botonInicio.x = 529;			botonInicio.y = 30;						//XML			var loaderInfoDieta:URLLoader = new URLLoader();			loaderInfoDieta.addEventListener(Event.COMPLETE,loaderInfoDietaHandler);			var rutaInfoDieta:URLRequest = new URLRequest("infoDieta.xml");			loaderInfoDieta.load(rutaInfoDieta);		}				//Funcion carga Informacion Dieta.		function loaderInfoDietaHandler(event:Event)		{			var posY:Number = new Number(560);						var cargadorDieta:URLLoader = event.target as URLLoader;			var xmlDieta:XML = new XML(cargadorDieta.data);									contador = 0;			for each(var nodo:XML in xmlDieta.elements()){				//Se cargan los datos de la dieta diaria.				if (contador == 0) {					var infoDietaDiaria:InfoDietaDiaria = new InfoDietaDiaria();					escenario.addChild(infoDietaDiaria);					infoDietaDiaria.x = 24;					infoDietaDiaria.y = 200;								infoDietaDiaria.caja_mediaManana.text = nodo.mediamanana;					infoDietaDiaria.caja_merienda.text = nodo.merienda;					infoDietaDiaria.caja_suplementacion.text = nodo.suplementacion;									contador = 1;				}				//Se cargan los datos de cada dia de la semana.				else {					var infoDieta:InfoDieta = new InfoDieta();					escenario.addChild(infoDieta);					infoDieta.x = 24;					infoDieta.y = posY;										infoDieta.caja_dia.text = nodo.dia;					infoDieta.caja_desayuno.text = nodo.desayuno;					infoDieta.caja_comida.text = nodo.comida;					infoDieta.caja_cena.text = nodo.cena;										posY = posY + 340;				}			}		}		//Funcion pantalla Acceso Monitores.		function botonMonitoresHandler(MouseEvent)		{						dragDieta = 0;			dragTabla = 0;			atras = 1;						//Se eliminan los objetos de la pantalla principal.			limpiaEscenario();							escenario.addChild(cabecera);			escenario.addChild(botonInicio);			botonInicio.x = 529;			botonInicio.y = 30;						if (accesoMonitores == 0) {				escenario.addChild(validaMonitor);				validaMonitor.x = 0;				validaMonitor.y = 340;				validaMonitor.caja_user.text = "";				validaMonitor.caja_pass.text = "";				validaMonitor.caja_validaTexto.text = "Por favor, valida tu acceso a continuación:";					escenario.addChild(botonValidarMonitor);				botonValidarMonitor.x = 175;				botonValidarMonitor.y = 580;			}			else {								escenario.addChild(botonInfoClientes);				botonInfoPersonal.x = 70;				botonInfoPersonal.y = 500;			}		}		//Funcion comprobar autrizacion monitor.		function botonValidarMonitorHandler(MouseEvent)		{			dragDieta = 0;			dragTabla = 0;			atras = 1;						if(validaMonitor.caja_user.text == "321" && validaMonitor.caja_pass.text == "CBA") {				accesoMonitores = 1;																//Se eliminan los objetos de la pantalla principal.				limpiaEscenario();								escenario.addChild(cabecera);				escenario.addChild(botonInicio);				botonInicio.x = 529;				botonInicio.y = 30;								escenario.addChild(botonInfoClientes);				botonInfoClientes.x = 70;				botonInfoClientes.y = 500;			}			else {				validaMonitor.caja_validaTexto.text = "User/pass incorrectos. Intentalo de nuevo";			}		}				//Funcion pantalla Informacion Personal.		function botonInfoClientesHandler(MouseEvent)		{						dragDieta = 0;			dragTabla = 0;			atras = 4;						//Se eliminan los objetos de la pantalla principal.			limpiaEscenario();						escenario.addChild(cabecera);			escenario.addChild(botonInicio);			botonInicio.x = 529;			botonInicio.y = 30;			//XML			var loaderInfoClientes:URLLoader = new URLLoader();			loaderInfoClientes.addEventListener(Event.COMPLETE,loaderInfoClientesHandler);			var rutaInfoClientes:URLRequest = new URLRequest("infoPersonal.xml");			loaderInfoClientes.load(rutaInfoClientes);		}				//Funcion carga Clientes.		function loaderInfoClientesHandler(event:Event)		{			var posY:Number = new Number(0);						var cargadorCliente:URLLoader = event.target as URLLoader;			var xmlCliente:XML = new XML(cargadorCliente.data);						for each(var nodo:XML in xmlCliente.elements()){				var gestionClientes:GestionClientes = new GestionClientes();				var botonGestion:BotonGestion = new BotonGestion();								botonGestion.addEventListener(MouseEvent.CLICK, botonGestionHandler);								//Se cargan los datos de los clientes				gestionClientes.caja_id.text = nodo.ID;				gestionClientes.caja_nombre.text = nodo.nombre;				gestionClientes.caja_apellidos.text = nodo.apellido1 + " " + nodo.apellido2;								escenario.addChild(gestionClientes);				gestionClientes.x = 25;				posY = posY + 200;				gestionClientes.y = posY;								escenario.addChild(botonGestion);				botonGestion.x = 25;				botonGestion.y = posY;			}				}				//Funcion pantalla gestion monitores Informacion Cliente.		function botonGestionHandler(MouseEvent)		{						dragDieta = 0;			dragTabla = 0;			atras = 5;						//Se eliminan los objetos de la pantalla principal.			limpiaEscenario();						escenario.addChild(cabecera);			escenario.addChild(botonInicio);			botonInicio.x = 529;			botonInicio.y = 30;			//XML			var loaderGesInfoPersonal:URLLoader = new URLLoader();			loaderGesInfoPersonal.addEventListener(Event.COMPLETE,loaderGesInfoPersonalHandler);			var rutaInfoPersonal:URLRequest = new URLRequest("infoPersonal.xml");			loaderGesInfoPersonal.load(rutaInfoPersonal);		}				function loaderGesInfoPersonalHandler(event:Event)		{			var cargadorCliente:URLLoader = event.target as URLLoader;			var xmlCliente:XML = new XML(cargadorCliente.data);						for each(var nodo:XML in xmlCliente.elements()){					escenario.addChild(imgCliente);					imgCliente.x = 430;					imgCliente.y = 235;					var moverImgCliente:Tween = new Tween(imgCliente,"alpha",Regular.easeIn,0,100,300);										//Se cargan los datos del cliente					infoCliente.caja_nombre.text = nodo.nombre;					infoCliente.caja_apellido1.text = nodo.apellido1;					infoCliente.caja_apellido2.text = nodo.apellido2;					infoCliente.caja_telefono.text = nodo.telefono;					infoCliente.caja_direccion.text = nodo.direccion;					infoCliente.caja_sexo.text = nodo.sexo;					infoCliente.caja_edad.text = nodo.edad;					infoCliente.caja_estatura.text = int(nodo.estatura)/100+" m";					infoCliente.caja_peso.text = nodo.peso+" kg";					infoCliente.caja_imc.text = String(int(nodo.peso)/((int(nodo.estatura)/100)*(int(nodo.estatura)/100)));					infoCliente.caja_trabajo.text = nodo.trabajo;					infoCliente.caja_dieta.text = nodo.dieta;					infoCliente.caja_otrasActividades.text = nodo.otrasActividades;					infoCliente.caja_objetivos.text = nodo.objetivos;					infoCliente.caja_enfermedades.text = nodo.enfermedades;			}						escenario.addChild(infoCliente);			infoCliente.x = 30;			infoCliente.y = 235;						escenario.addChild(botonGesTabla);			botonGesTabla.x = 15;			botonGesTabla.y = 950;						escenario.addChild(botonGesDieta);			botonGesDieta.x = 325;			botonGesDieta.y = 950;		}				//Funcion pantalla Seguimiento.		function botonGesTablaHandler(MouseEvent)		{			dragTabla = 1;			atras = 6;						//Se eliminan los objetos de la pantalla principal.			limpiaEscenario();						escenario.addChild(cabecera);			escenario.addChild(botonInicio);			botonInicio.x = 529;			botonInicio.y = 30;						//XML			var loaderInfoEjercicios:URLLoader = new URLLoader();			loaderInfoEjercicios.addEventListener(Event.COMPLETE,loaderInfoEjerciciosHandler);			var rutaInfoEjercicios:URLRequest = new URLRequest("infoEjercicios.xml");			loaderInfoEjercicios.load(rutaInfoEjercicios);		}				//Funcion pantalla Seguimiento.		function botonGesDietaHandler(MouseEvent)		{						dragDieta = 1;			atras = 6;						//Se eliminan los objetos de la pantalla principal.			limpiaEscenario();						escenario.addChild(cabecera);			escenario.addChild(botonInicio);			botonInicio.x = 529;			botonInicio.y = 30;						//XML			var loaderInfoDieta:URLLoader = new URLLoader();			loaderInfoDieta.addEventListener(Event.COMPLETE,loaderInfoDietaHandler);			var rutaInfoDieta:URLRequest = new URLRequest("infoDieta.xml");			loaderInfoDieta.load(rutaInfoDieta);		}				//Funcion que limpia el escenario de objetos.		function limpiaEscenario():void {			while (escenario.numChildren > 0) {   				escenario.removeChildAt(0);  				//Cuando elimine el ultimo hijo, finaliza el borrado.  				if (escenario.numChildren == 0) {    				break;   				}			}		}				//Funcion boton Inicio.		function botonInicioHandler(MouseEvent)		{			dragDieta = 0;			dragTabla = 0;						//Se eliminan los objetos de la pantalla principal.			limpiaEscenario();										escenario.addChild(cabecera);			escenario.addChild(texto);			texto.x = 130;			texto.y = 300;			escenario.addChild(botonClientes);			botonClientes.x = 70;			botonClientes.y = 500;			escenario.addChild(botonMonitores);			botonMonitores.x = 70;			botonMonitores.y = 630;						escenario.addChild(version);			version.x = 556;			version.y = 1018;		}				function funcionAtras():void {			dragDieta = 0;			dragTabla = 0;			if (atras != 0) {				limpiaEscenario();							if(atras == 1) {								dragDieta = 0;					dragTabla = 0;										//Añadimos los objetos de la pantalla Principal.					escenario.addChild(cabecera);							escenario.addChild(texto);					texto.x = 130;					texto.y = 300;					escenario.addChild(botonClientes);					botonClientes.x = 70;					botonClientes.y = 500;					escenario.addChild(botonMonitores);					botonMonitores.x = 70;					botonMonitores.y = 630;										escenario.addChild(version);					version.x = 556;					version.y = 1018;				}					else if(atras == 2) {						dragDieta = 0;					dragTabla = 0;										atras = 1;										escenario.addChild(cabecera);					escenario.addChild(botonInicio);					botonInicio.x = 529;					botonInicio.y = 30;										//Añadimos los objetos de la pantalla Acceso Clientes.					escenario.addChild(botonInfoPersonal);					botonInfoPersonal.x = 70;					botonInfoPersonal.y = 500;							escenario.addChild(botonSeguimiento);					botonSeguimiento.x = 70;					botonSeguimiento.y = 630;				}				else if(atras == 3) {						dragDieta = 0;					dragTabla = 0;										atras = 2;										escenario.addChild(cabecera);					escenario.addChild(botonInicio);					botonInicio.x = 529;					botonInicio.y = 30;										//Añadimos los objetos de la pantalla Seguimiento.					escenario.addChild(botonEjercicios);					botonEjercicios.x = 70;					botonEjercicios.y = 500;							escenario.addChild(botonDieta);					botonDieta.x = 70;					botonDieta.y = 630;				}				else if(atras == 4) {							dragDieta = 0;					dragTabla = 0;										atras = 1;										escenario.addChild(cabecera);					escenario.addChild(botonInicio);					botonInicio.x = 529;					botonInicio.y = 30;									//Añadimos los objetos de la pantalla Acceso Monitores.					escenario.addChild(botonInfoClientes);					botonInfoClientes.x = 70;					botonInfoClientes.y = 500;				}					else if(atras == 5) {							dragDieta = 0;					dragTabla = 0;										atras = 4;										escenario.addChild(cabecera);					escenario.addChild(botonInicio);					botonInicio.x = 529;					botonInicio.y = 30;										//XML					var loaderInfoClientes:URLLoader = new URLLoader();					loaderInfoClientes.addEventListener(Event.COMPLETE,loaderInfoClientesHandler);					var rutaInfoClientes:URLRequest = new URLRequest("infoPersonal.xml");					loaderInfoClientes.load(rutaInfoClientes);				}								else if(atras == 6) {					dragDieta = 0;					dragTabla = 0;										atras = 5;										escenario.addChild(cabecera);					escenario.addChild(botonInicio);					botonInicio.x = 529;					botonInicio.y = 30;										//XML					var loaderGesInfoPersonal:URLLoader = new URLLoader();					loaderGesInfoPersonal.addEventListener(Event.COMPLETE,loaderGesInfoPersonalHandler);					var rutaInfoPersonal:URLRequest = new URLRequest("infoPersonal.xml");					loaderGesInfoPersonal.load(rutaInfoPersonal);				}			}		}				//Funcion para controlar el boton atras del dispositivo		protected function onKeyDown(event:KeyboardEvent):void {   			if( event.keyCode == Keyboard.BACK ) {      			event.preventDefault();      			event.stopImmediatePropagation();								funcionAtras();   			}		}		function scrollDownHandler(MouseEvent) {			if (dragDieta == 1 || dragTabla == 1) {				distancia = -1850;			}						else distancia = 0;						escenario.startDrag(false, new Rectangle(0,0,0,distancia));		}				function scrollUpHandler(MouseEvent) {			escenario.stopDrag();		}	}}